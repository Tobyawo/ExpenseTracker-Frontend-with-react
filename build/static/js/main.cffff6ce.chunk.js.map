{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Expenses/ExpensesFilter.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","expenseAmount","ExpensesList","items","length","map","expense","id","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","submitHandler","a","preventDefault","expenseData","Date","fetch","method","body","JSON","stringify","headers","onSaveExpenseData","onSubmit","type","min","step","NewExpense","enteredExpenseData","random","onAddExpense","App","httpError","setHttpError","setExpenses","useEffect","response","ok","Error","json","responseData","EXPENSES","item","fetchExpenses","catch","error","message","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cffff6ce.chunk.js","sourcesContent":["// extracting surrounding container div and their common css.style into cards\n//Card acts as shell or wrapper around our ExpenseItem content or Expenses content or any other component\nimport './Card.css';\n\nfunction Card(props){\n //children is a reserved name, it doesnt need to be set as a variable for the card to accept from parent   \n// children's value will always be the content btw the opening and closing tag of your custom component where it is used\nconst classes = 'card ' + props.className; // making sure card css clases and the parent css classes work \n\nreturn <div className={classes}>{props.children}</div>\n\n}\n\nexport default Card;","// rendering the date of the expense\nimport './ExpenseDate.css';\nconst ExpenseDate = (props) => {\n\n    const month = props.date.toLocaleString('en-US',{month:'long'});\n    const day = props.date.toLocaleString('en-US',{day:'2-digit'});\n    const year = props.date.getFullYear();\n\nreturn(<div className=\"expense-date\">\n    <div className=\"expense-date_month\">{month}</div>\n    <div className=\"expense-date_day\">{day}</div>\n    <div className=\"expense-date_year\">{year}</div>\n    </div>\n);\n}\n\nexport default ExpenseDate;","// import css file\nimport ExpenseDate from './ExpenseDate';\nimport Card from '../UI/Card';\nimport React from 'react'; \nimport './ExpenseItem.css';\n\n// this is a stateless or presentational component. \n// No internal state but just there to output data\nconst ExpenseItem = (props) => {\n\n    return (\n    <li>\n    <Card className=\"expense-item\">\n        <ExpenseDate date={props.date}/>\n       <div className=\"expense-item_description\">\n            <h2>{props.title}</h2>\n        <div className=\"expense-item_price\">{props.expenseAmount}</div> \n        </div>\n        </Card>\n        </li>\n        );\n}\n\nexport default ExpenseItem;","import ExpenseItem from './ExpenseItem';\nimport './ExpensesList.css';\n\n\n\nconst ExpensesList = (props) => {\nif(props.items.length === 0){\n  return <h2 className='expenses-list__fallback'>Your Expenses</h2>;\n}\n\n\n\n\n\nreturn (<ul className=\"expenses-List\">\n{props.items.map((expense) => \n  (<ExpenseItem \n  key={expense.id} \n  title={expense.title} \n  expenseAmount={`$${expense.expenseAmount}`}\n   date={expense.date} />))}\n\n</ul>\n);\n  };\n\n\nexport default ExpensesList;","import React from 'react';\n\nimport './ExpensesFilter.css';\n\n\n\n//this component can be refered to as a controlled component\n//both the value and the changes to the value are not handle in the component itself but parent\n\n\nconst ExpensesFilter = (props) => {\n  const dropdownChangeHandler = (event) => {\n    props.onChangeFilter(event.target.value);\n  };\n  return (\n    <div className='expenses-filter'>\n      <div className='expenses-filter__control'>\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={dropdownChangeHandler}>\n          <option value='2021'>2021</option>\n          <option value='2020'>2020</option>\n          <option value='2019'>2019</option>\n          <option value='2019'>2018</option>\n          <option value='2019'>2017</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;","import './ChartBar.css';\n\nconst ChartBar = (props) => {\nlet barFillHeight = '0%';\n\nif(props.maxValue > 0){\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\n}\n\n\n    return (<div className=\"chart-bar\">\n        <div className=\"chart-bar__inner\">\n<div className=\"chart-bar__fill\" style={{ height: barFillHeight}}></div>\n</div>\n    <div className=\"chart-bar__label\">{props.label}</div>\n</div>);\n};\n\n\nexport default ChartBar;","import ChartBar from './ChartBar';\nimport './Chart.css';\n\n\nconst Chart = (props) => {\n    const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\n    const totalMaximum = Math.max(...dataPointValues); //will receive 12 values from the array\n\n return (<div className=\"chart\">\n    {props.dataPoints.map((dataPoint) => (\n    <ChartBar \n    key={dataPoint.label} \n    value={dataPoint.value} \n    maxValue={totalMaximum} \n    label={dataPoint.label}\n    />\n    ))}\n</div>\n );\n};\n\nexport default Chart;","import Chart from '../Chart/Chart';\n\nconst ExpensesChart = props => {\n\n    //DataPoint initilized with 0 value\n    const chartDataPoints = [\n        {label: 'Jan', value:0},\n        {label: 'Feb', value:0},\n        {label: 'Mar', value:0},\n        {label: 'Apr', value:0},\n        {label: 'May', value:0},\n        {label: 'Jun', value:0},\n        {label: 'Jul', value:0},\n        {label: 'Aug', value:0},\n        {label: 'Sept', value:0},\n        {label: 'Oct', value:0},\n        {label: 'Nov', value:0},\n        {label: 'Dec', value:0}\n    ];\n\n\n    for(const expense of props.expenses){\n        const expenseMonth = expense.date.getMonth();  //starting at 0 index. Jan = 0;\n    chartDataPoints[expenseMonth].value += expense.expenseAmount;\n    \n    }\nreturn <Chart dataPoints={chartDataPoints}/>\n};\n\nexport default ExpensesChart;","// import ExpenseItem from \"./ExpenseItem\";\nimport Card from '../UI/Card';\nimport './Expenses.css';\nimport ExpensesList from './ExpensesList';\nimport ExpensesFilter from './ExpensesFilter';\nimport ExpensesChart from './ExpensesChart';\nimport React, { useState } from 'react'; //import React , and useState hook(one of the most important hooks) from react library\n\n\n\n\n\nconst Expenses = (props) => {\n\n  const [filteredYear, setFilteredYear] = useState('2021');\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filteredExpenses = props.items.filter(expense =>{\n    return expense.date.getFullYear().toString() === filteredYear;\n  })\n\n\n  // checking if filteredlist is not null with && expression to render not found message or  \n  //     map the filteredExpenses to Expenseitem properties. the key is a unique prop to identify each array \n       \n\n\n\nreturn(\n  <div>\n    <Card className=\"expenses\">\n      <ExpensesFilter \n      selected={filteredYear} \n      onChangeFilter={filterChangeHandler} />\n      <ExpensesChart expenses ={filteredExpenses}/>\n     <ExpensesList items={filteredExpenses} /> \n    </Card>\n    </div>\n);\n\n};\n\nexport default Expenses;","import './ExpenseForm.css';\nimport React, {useState} from 'react';\n\nconst ExpenseForm = (props) =>{\n\n    //initializing multiple state ExpenseForm properties as string \n    //change in one property doesnt affect others\n   \n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n\n    //alternatively u can have all properties in a single state slice\n    //however, update to one will need to update all\n\n//    const [userInput, setUserInput] = useState({\n// enteredTitle: '',\n// enteredAmount: '',\n// enteredDate: ''\n//     });\n\n\n\n\n\n    const titleChangeHandler = (event) => {\nsetEnteredTitle(event.target.value);\n//alternately\n// if changes depend on previous state\n    // the spread operator makes sure that the prevStateof other properties is \n    // the latest other properties is carried along with the changes to one\n    // we only overide the Title property here.\n// setUserInput((prevState) => {\n//     return { ...prevState, enteredTitle: event.target.value};\n// });\n    };  \n\n      const amountChangeHandler = (event) => {\n        setEnteredAmount(event.target.value);\n        // setUserInput((prevState) => {\n        //     return { ...prevState, enteredAmount: event.target.value};\n        // });\n            };  \n\n    const dateChangeHandler = (event) => {\n        setEnteredDate(event.target.value);\n        // setUserInput((prevState) => {\n        //     return { ...prevState, enteredDate: event.target.value};\n        // });\n            }; \n\n\n\n// const submitOrderHandler = async (userData) => {\n//     setIsSubmitting(true);\n//     const order = {\"user\":{...userData}, \"orderedItems\":[...cartCtx.items]};\n//     console.log(order);\n//     await fetch('https://quickmeal.herokuapp.com/saveOrder', {\n//       method: 'POST',\n//       body: JSON.stringify(order),\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n      \n//     });\n//     setIsSubmitting(false);\n//     setDidSubmit(true);\n//     cartCtx.clearCart();\n//   };\n\n        \n    const submitHandler = async (event) =>{\n        //we dont want the form details to be sent to server and reloading of page as defaulted but to\n        //be handle by this javascript\nevent.preventDefault();\n\n//save the data inside expenseData variable\nconst expenseData = {\n  title: enteredTitle,\n  expenseAmount: enteredAmount,\n  date: new Date(enteredDate)  \n};\n\n//save to database\nawait fetch('https://myapiservice.herokuapp.com/saveExpense', {\n    method: 'POST',\n    body: JSON.stringify(expenseData),\n    headers: {\n      'Content-Type': 'application/json',\n    },  \n  });\n\n\nprops.onSaveExpenseData(expenseData); //This will transfer the collected form data to the parent before been cleared off\n//After the form details has been submitted and processed, clear/reset the properties\nsetEnteredTitle('')\nsetEnteredAmount('')\nsetEnteredDate('')\n\n    };\n\n    return(  \n        <form onSubmit={submitHandler}>\n            <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n            <label>Title: </label>\n            <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler}/>    \n        </div>\n        <div className=\"new-expense__control\">\n            <label>Amount: </label>\n            <input type='number' value={enteredAmount} onChange={amountChangeHandler} min=\"0.01\" step=\"0.01\"/>    \n        </div>\n        <div className=\"new-expense__control\">\n            <label>Date: </label>\n            <input type=\"date\" value={enteredDate} onChange={dateChangeHandler} min=\"2019-01-01\" max=\"2022-12-31\"/>     \n        </div>\n            </div>\n       <div className=\"new-expense__actions\">\n           <button type=\"submit\" >Add Expense</button>\n\n       </div>\n        </form>\n\n    );\n}\n\nexport default ExpenseForm;\n\n\n\n\n\n\n\n\n// const submitOrderHandler = async (userData) => {\n//     setIsSubmitting(true);\n//     const order = {\"user\":{...userData}, \"orderedItems\":[...cartCtx.items]};\n//     console.log(order);\n//     await fetch('https://quickmeal.herokuapp.com/saveOrder', {\n//       method: 'POST',\n//       body: JSON.stringify(order),\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n      \n//     });\n//     setIsSubmitting(false);\n//     setDidSubmit(true);\n//     cartCtx.clearCart();\n//   };\n\n\n\n\n//   const AvailableMeals = () => {\n//     const [meals, setMeals] = useState([]);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [httpError, setHttpError] = useState();\n  \n//     useEffect(() => {\n//       const fetchMeals = async () => {\n//         const response = await fetch(\n//           'https://quickmeal.herokuapp.com/foods'\n//         );\n//         // console.log(response);\n  \n//         if (!response.ok) {\n//           throw new Error('Something went wrong!');\n//         }\n  \n//         const responseData = await response.json();\n  \n//         const loadedMeals = [];\n  \n//         for (const key in responseData) {\n//           loadedMeals.push({\n//             id: key,\n//             name: responseData[key].name,\n//             description: responseData[key].description,\n//             price: responseData[key].price,\n//           });\n//         }\n  \n//         setMeals(loadedMeals);\n//         setIsLoading(false);\n//       };\n  \n//       fetchMeals().catch((error) => {\n//         setIsLoading(false);\n//         setHttpError(error.message);\n//       });\n//     }, []);\n  \n//     if (isLoading) {\n//       return (\n//         <section className={classes.MealsLoading}>\n//           <p>Loading...</p>\n//         </section>\n//       );\n//     }\n  \n//     if (httpError) {\n//       return (\n//         <section className={classes.MealsError}>\n//           <p>{httpError}</p>\n//         </section>\n//       );\n//     }\n  \n//     const mealsList = meals.map((meal) => (\n//       <MealItem\n//         key={meal.id}\n//         id={meal.id}\n//         name={meal.name}\n//         description={meal.description}\n//         price={meal.price}\n//       />\n//     ));\n  \n//     return (\n//       <section className={classes.meals}>\n//         <Card>\n//           <ul>{mealsList}</ul>\n//         </Card>\n//       </section>\n//     );\n//   };\n  \n//   export default AvailableMeals;","\nimport './NewExpense.css';\nimport ExpenseForm from './ExpenseForm';\n\nconst NewExpense = (props) => {\n\nconst saveExpenseDataHandler =(enteredExpenseData) =>{\n    const expenseData = {\n...enteredExpenseData,\nid: Math.random().toString()\n    };\n\n    // passing values from child component to App.js (parent component) using \n    // props to receive a function from the parent component\n    props.onAddExpense(expenseData);\n};\n\n// here, data is Lifted up from child to parent using a function that\n//is triggered when an event happend in the child component \n//Expense form data are transfered from Expense form to NewExpense\n    return(\n        <div className=\"new-expense\">\n        <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\n        </div>\n    );\n\n}; \n\nexport default NewExpense;","import React, {useState, useEffect} from 'react';\nimport Expenses from './components/Expenses/Expenses';\nimport NewExpense from './components/NewExpense/NewExpense';\nimport './components/Expenses/ExpensesList.css';\n// returns JSX (JavaScript XML) it is basically a HTML code inside javascript \n// this App component serves as a parent component to other components and will be rendered to the DOM\n\n// Just an array of expenses to be initially displayed\n// const DUMMY_EXPENSES = [\n//   {id:'e1',title:'Car Insurance', expenseAmount:294.09, date: new Date(2021,3,12)},\n//   {id:'e2',title:'House', expenseAmount:454.77, date: new Date(2019,5,22)},\n//   {id:'e3',title:'Clothes', expenseAmount:124.67, date: new Date(2021,9,2)},\n//   {id:'e4',title:'Jewelries', expenseAmount:813.98, date: new Date(2019,8,3)},\n// ];\n\nconst App = () => {\n  // const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(); \nconst [expenses, setExpenses] = useState([]);\nuseEffect( ()=> {\nconst fetchExpenses = async () => {\n  const response = await fetch(\n    'https://myapiservice.herokuapp.com/expenses'\n  )\n\n  if (!response.ok) {\n    throw new Error('Something went wrong!');\n  }\n\n  const responseData = await response.json();\n  // console.log(responseData);\n\n  const EXPENSES = responseData.map(item=>({id:item.id,title:item.title, \n                                      expenseAmount:item.expenseAmount,\n                                      date:new Date(item.date)\n                                    }));\n  setExpenses(EXPENSES);\n  // setIsLoading(false);\n};\n\n\n  fetchExpenses().catch((error) => {\n    // setIsLoading(false);\n    setHttpError(error.message);\n  });\n\n\n  \n\n}, []);\n\n\n\n\n// if (isLoading) {\n//   return (  \n//     <section >\n//       <p>Loading...</p>\n//     </section>\n//   );\n// }\n\nif (httpError) {\n  return (\n    <section>\n      <p>{httpError}</p>\n    </section>\n  );\n}\n\n\n //function to receive data Lifted up from NewExpense component.\nconst addExpenseHandler = expense => {\nsetExpenses(prevExpenses =>{\n  return [expense, ...prevExpenses];\n});\n\n};\n\n  return (\n    <div>   \n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={expenses}/>\n    </div>\n  );\n}\n\n// exporting the function makes it importable in other folder\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\n// rendering the app component to the root tag of the html\n// we can only rendera single component to our root component \nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}